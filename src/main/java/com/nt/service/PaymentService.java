package com.nt.service;

import java.time.Instant;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.nt.dto.PaymentRequest;
import com.nt.entity.Payment;
import com.nt.repository.PaymentRepository;



@Service
public class PaymentService {

	@Autowired
    private final PaymentRepository paymentRepository;
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    //ReqArgConstructor...
    public PaymentService(PaymentRepository paymentRepository) {
		super();
		this.paymentRepository = paymentRepository;
	}

	public Payment initiatePayment(PaymentRequest request) {
        // Using constructor
        Payment payment = new Payment(
            null, // id will be generated by DB
            request.getDealerId(),
            request.getAmount(),
            request.getMethod(),
            "PENDING",
            Instant.now()
        );

        paymentRepository.save(payment);

        // Simulate callback after 5 seconds
        scheduler.schedule(() -> {
            payment.setStatus("SUCCESS");
            paymentRepository.save(payment);
        }, 5, TimeUnit.SECONDS);

        return payment;
    }

    public Optional<Payment> getPayment(Long id) {
        return paymentRepository.findById(id);
    }
}
